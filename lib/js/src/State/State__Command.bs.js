// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Path = require("path");
var Curry = require("rescript/lib/js/curry.js");
var VSCode = require("rescript-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Js_array = require("rescript/lib/js/js_array.js");
var Js_string = require("rescript/lib/js/js_string.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var IM$AgdaModeVscode = require("../InputMethod/IM.bs.js");
var Goal$AgdaModeVscode = require("../Goal.bs.js");
var Item$AgdaModeVscode = require("../View/Component/Item.bs.js");
var State$AgdaModeVscode = require("../State.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var Parser$AgdaModeVscode = require("../Parser/Parser.bs.js");
var Command$AgdaModeVscode = require("../Command.bs.js");
var Connection$AgdaModeVscode = require("../Connection/Connection.bs.js");
var Translator$AgdaModeVscode = require("../InputMethod/Translator.bs.js");
var State__Goal$AgdaModeVscode = require("./State__Goal.bs.js");
var State__View$AgdaModeVscode = require("./State__View.bs.js");
var Highlighting$AgdaModeVscode = require("../Highlighting.bs.js");
var State__Response$AgdaModeVscode = require("./State__Response.bs.js");
var Connection__Error$AgdaModeVscode = require("../Connection/Connection__Error.bs.js");
var State__InputMethod$AgdaModeVscode = require("./State__InputMethod.bs.js");

function dispatchCommand(state, _command) {
  while(true) {
    var command = _command;
    var dispatchCommand$1 = function (param) {
      return dispatchCommand(state, param);
    };
    var sendAgdaRequest = function (param) {
      return State$AgdaModeVscode.sendRequest(state, (function (param) {
                    return State__Response$AgdaModeVscode.handle(state, dispatchCommand$1, param);
                  }), param);
    };
    var header = {
      TAG: 0,
      _0: Command$AgdaModeVscode.toString(command),
      [Symbol.for("name")]: "Plain"
    };
    if (typeof command === "number") {
      switch (command) {
        case /* Load */0 :
            return $$Promise.flatMap($$Promise.flatMap($$Promise.flatMap(State__View$AgdaModeVscode.DebugBuffer.restore(state), (function (param) {
                                  return State__View$AgdaModeVscode.Panel.display(state, {
                                              TAG: 0,
                                              _0: "Loading ...",
                                              [Symbol.for("name")]: "Plain"
                                            }, []);
                                })), (function (param) {
                              return state.document.save();
                            })), (function (param) {
                          var options = VSCode.TextDocumentShowOptions.make(undefined, false, undefined, undefined, undefined);
                          return $$Promise.flatMap(Vscode.window.showTextDocument(state.document, options), (function (param) {
                                        return sendAgdaRequest(/* Load */0);
                                      }));
                        }));
        case /* Quit */1 :
            return $$Promise.resolved({
                        TAG: 0,
                        _0: undefined,
                        [Symbol.for("name")]: "Ok"
                      });
        case /* Restart */2 :
            state.runningInfoLog = [];
            _command = /* Load */0;
            continue ;
        case /* Refresh */3 :
            Highlighting$AgdaModeVscode.redecorate(state.highlighting, state.editor);
            State__View$AgdaModeVscode.Panel.restore(state);
            State__Goal$AgdaModeVscode.redecorate(state);
            return $$Promise.map(State__View$AgdaModeVscode.DebugBuffer.restore(state), (function (param) {
                          return {
                                  TAG: 0,
                                  _0: undefined,
                                  [Symbol.for("name")]: "Ok"
                                };
                        }));
        case /* Compile */4 :
            return sendAgdaRequest(/* Compile */1);
        case /* ToggleDisplayOfImplicitArguments */5 :
            return sendAgdaRequest(/* ToggleDisplayOfImplicitArguments */2);
        case /* ToggleDisplayOfIrrelevantArguments */6 :
            return sendAgdaRequest(/* ToggleDisplayOfIrrelevantArguments */3);
        case /* ShowConstraints */7 :
            return sendAgdaRequest(/* ShowConstraints */4);
        case /* NextGoal */8 :
            return $$Promise.map(State__Goal$AgdaModeVscode.next(state), (function (param) {
                          return {
                                  TAG: 0,
                                  _0: undefined,
                                  [Symbol.for("name")]: "Ok"
                                };
                        }));
        case /* PreviousGoal */9 :
            return $$Promise.map(State__Goal$AgdaModeVscode.previous(state), (function (param) {
                          return {
                                  TAG: 0,
                                  _0: undefined,
                                  [Symbol.for("name")]: "Ok"
                                };
                        }));
        case /* Give */10 :
            var match = State__Goal$AgdaModeVscode.pointed(state);
            if (match === undefined) {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            }
            var goal = match[0];
            if (match[1] === "") {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.prompt(state, header, {
                              body: undefined,
                              placeholder: "expression to give:",
                              value: undefined
                            }, (function(goal){
                            return function (expr) {
                              if (expr === "") {
                                return sendAgdaRequest({
                                            TAG: 4,
                                            _0: goal,
                                            [Symbol.for("name")]: "Give"
                                          });
                              } else {
                                return $$Promise.flatMap(State__Goal$AgdaModeVscode.modify(state, goal, (function (param) {
                                                  return expr;
                                                })), (function (param) {
                                              return sendAgdaRequest({
                                                          TAG: 4,
                                                          _0: goal,
                                                          [Symbol.for("name")]: "Give"
                                                        });
                                            }));
                              }
                            }
                            }(goal))), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            } else {
              return sendAgdaRequest({
                          TAG: 4,
                          _0: goal,
                          [Symbol.for("name")]: "Give"
                        });
            }
        case /* Refine */11 :
            var match$1 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$1 !== undefined) {
              return sendAgdaRequest({
                          TAG: 5,
                          _0: match$1[0],
                          [Symbol.for("name")]: "Refine"
                        });
            } else {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            }
        case /* Auto */12 :
            var match$2 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$2 !== undefined) {
              return sendAgdaRequest({
                          TAG: 7,
                          _0: match$2[0],
                          [Symbol.for("name")]: "Auto"
                        });
            } else {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            }
        case /* Case */13 :
            var match$3 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$3 === undefined) {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            }
            var goal$1 = match$3[0];
            if (match$3[1] === "") {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.prompt(state, header, {
                              body: "Please specify which variable you wish to split",
                              placeholder: "variable to case split:",
                              value: undefined
                            }, (function(goal$1){
                            return function (expr) {
                              if (expr === "") {
                                return sendAgdaRequest({
                                            TAG: 8,
                                            _0: goal$1,
                                            [Symbol.for("name")]: "Case"
                                          });
                              } else {
                                return $$Promise.flatMap(State__Goal$AgdaModeVscode.modify(state, goal$1, (function (param) {
                                                  return expr;
                                                })), (function (param) {
                                              return sendAgdaRequest({
                                                          TAG: 8,
                                                          _0: goal$1,
                                                          [Symbol.for("name")]: "Case"
                                                        });
                                            }));
                              }
                            }
                            }(goal$1))), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            } else {
              return sendAgdaRequest({
                          TAG: 8,
                          _0: goal$1,
                          [Symbol.for("name")]: "Case"
                        });
            }
        case /* WhyInScope */14 :
            var placeholder = "name:";
            var match$4 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$4 === undefined) {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.prompt(state, header, {
                              body: undefined,
                              placeholder: placeholder,
                              value: undefined
                            }, (function (expr) {
                                return sendAgdaRequest({
                                            TAG: 22,
                                            _0: expr,
                                            [Symbol.for("name")]: "WhyInScopeGlobal"
                                          });
                              })), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            }
            var expr = match$4[1];
            var goal$2 = match$4[0];
            if (expr === "") {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.prompt(state, header, {
                              body: undefined,
                              placeholder: placeholder,
                              value: undefined
                            }, (function(goal$2){
                            return function (expr) {
                              return sendAgdaRequest({
                                          TAG: 21,
                                          _0: expr,
                                          _1: goal$2,
                                          [Symbol.for("name")]: "WhyInScope"
                                        });
                            }
                            }(goal$2))), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            } else {
              return sendAgdaRequest({
                          TAG: 21,
                          _0: expr,
                          _1: goal$2,
                          [Symbol.for("name")]: "WhyInScope"
                        });
            }
        case /* SwitchAgdaVersion */15 :
            var oldAgdaVersion = Config$AgdaModeVscode.Connection.getAgdaVersion(undefined);
            return $$Promise.map(State__View$AgdaModeVscode.Panel.prompt(state, header, {
                            body: undefined,
                            placeholder: undefined,
                            value: oldAgdaVersion
                          }, (function (expr) {
                              var oldAgdaPath = Config$AgdaModeVscode.Connection.getAgdaPath(undefined);
                              var newAgdaVersion = expr.trim();
                              return $$Promise.flatMap($$Promise.flatMap($$Promise.flatMap($$Promise.flatMap($$Promise.flatMap(Config$AgdaModeVscode.Connection.setAgdaPath(""), (function (param) {
                                                            return Config$AgdaModeVscode.Connection.setAgdaVersion(newAgdaVersion);
                                                          })), (function (param) {
                                                        return State__View$AgdaModeVscode.Panel.display(state, {
                                                                    TAG: 0,
                                                                    _0: "Switching to '" + newAgdaVersion + "'",
                                                                    [Symbol.for("name")]: "Plain"
                                                                  }, []);
                                                      })), Connection$AgdaModeVscode.stop), (function (param) {
                                                return Connection$AgdaModeVscode.start(state.globalStoragePath, false, (function (param) {
                                                              return State$AgdaModeVscode.onDownload(state, param);
                                                            }));
                                              })), (function (result) {
                                            if (result.TAG === /* Ok */0) {
                                              var match = result._0;
                                              if (match.TAG !== /* Emacs */0) {
                                                return $$Promise.map(State__View$AgdaModeVscode.Panel.display(state, {
                                                                TAG: 1,
                                                                _0: "Panic, Switched to LSP server '" + match._0 + "'",
                                                                [Symbol.for("name")]: "Success"
                                                              }, [Item$AgdaModeVscode.plainText("Should have switched to an Agda executable, please file an issue")]), (function (param) {
                                                              return {
                                                                      TAG: 0,
                                                                      _0: undefined,
                                                                      [Symbol.for("name")]: "Ok"
                                                                    };
                                                            }));
                                              }
                                              var path = match._1;
                                              var version = match._0;
                                              return $$Promise.map($$Promise.flatMap(State__View$AgdaModeVscode.Panel.displayStatus(state, "Emacs v" + version), (function (param) {
                                                                return State__View$AgdaModeVscode.Panel.display(state, {
                                                                            TAG: 1,
                                                                            _0: "Switched to version '" + version + "'",
                                                                            [Symbol.for("name")]: "Success"
                                                                          }, [Item$AgdaModeVscode.plainText("Found '" + newAgdaVersion + "' at: " + path)]);
                                                              })), (function (param) {
                                                            return {
                                                                    TAG: 0,
                                                                    _0: undefined,
                                                                    [Symbol.for("name")]: "Ok"
                                                                  };
                                                          }));
                                            }
                                            var match$1 = Connection__Error$AgdaModeVscode.toString(result._0);
                                            var header = {
                                              TAG: 3,
                                              _0: "Cannot switch Agda version '" + newAgdaVersion + "' : " + match$1[0],
                                              [Symbol.for("name")]: "Error"
                                            };
                                            var body = [Item$AgdaModeVscode.plainText(match$1[1] + "\n\nSwitching back to " + oldAgdaPath)];
                                            return $$Promise.map($$Promise.flatMap(Config$AgdaModeVscode.Connection.setAgdaPath(oldAgdaPath), (function (param) {
                                                              return State__View$AgdaModeVscode.Panel.display(state, header, body);
                                                            })), (function (param) {
                                                          return {
                                                                  TAG: 0,
                                                                  _0: undefined,
                                                                  [Symbol.for("name")]: "Ok"
                                                                };
                                                        }));
                                          }));
                            })), (function (param) {
                          return {
                                  TAG: 0,
                                  _0: undefined,
                                  [Symbol.for("name")]: "Ok"
                                };
                        }));
        case /* Escape */16 :
            if (IM$AgdaModeVscode.isActivated(state.editorIM) || IM$AgdaModeVscode.isActivated(state.promptIM)) {
              return $$Promise.map(State__InputMethod$AgdaModeVscode.deactivate(state), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            } else {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.interruptPrompt(state), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            }
        case /* LookupSymbol */17 :
            var match$5 = $$Promise.pending(undefined);
            var resolve = match$5[1];
            var selectedText = Editor$AgdaModeVscode.$$Text.get(state.document, Editor$AgdaModeVscode.$$Selection.get(state.editor)).trim();
            if (selectedText === "") {
              State__View$AgdaModeVscode.Panel.prompt(state, {
                    TAG: 0,
                    _0: "Lookup Unicode Symbol Input Sequence",
                    [Symbol.for("name")]: "Plain"
                  }, {
                    body: undefined,
                    placeholder: "symbol to lookup:",
                    value: undefined
                  }, (function(resolve){
                  return function (input) {
                    Curry._1(resolve, input.trim());
                    return $$Promise.resolved({
                                TAG: 0,
                                _0: undefined,
                                [Symbol.for("name")]: "Ok"
                              });
                  }
                  }(resolve)));
            } else {
              Curry._1(resolve, selectedText);
            }
            return $$Promise.map($$Promise.flatMap(match$5[0], (function(selectedText){
                          return function (input) {
                            var sequences = Belt_Option.getWithDefault(Translator$AgdaModeVscode.lookup(input), []);
                            if (sequences.length === 0) {
                              return State__View$AgdaModeVscode.Panel.display(state, {
                                          TAG: 2,
                                          _0: "No Input Sequences Found for \"" + selectedText + "\"",
                                          [Symbol.for("name")]: "Warning"
                                        }, []);
                            } else {
                              return State__View$AgdaModeVscode.Panel.display(state, {
                                          TAG: 1,
                                          _0: String(sequences.length) + " Input Sequences Found for \"" + selectedText + "\"",
                                          [Symbol.for("name")]: "Success"
                                        }, Belt_Array.map(sequences, Item$AgdaModeVscode.plainText));
                            }
                          }
                          }(selectedText))), (function (param) {
                          return {
                                  TAG: 0,
                                  _0: undefined,
                                  [Symbol.for("name")]: "Ok"
                                };
                        }));
        case /* OpenDebugBuffer */18 :
            State__View$AgdaModeVscode.DebugBuffer.make(state);
            return $$Promise.map(State__View$AgdaModeVscode.DebugBuffer.reveal(state), (function (param) {
                          return {
                                  TAG: 0,
                                  _0: undefined,
                                  [Symbol.for("name")]: "Ok"
                                };
                        }));
        
      }
    } else {
      switch (command.TAG | 0) {
        case /* SolveConstraints */0 :
            var normalization = command._0;
            var match$6 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$6 !== undefined) {
              return sendAgdaRequest({
                          TAG: 0,
                          _0: normalization,
                          _1: match$6[0],
                          [Symbol.for("name")]: "SolveConstraints"
                        });
            } else {
              return sendAgdaRequest({
                          TAG: 1,
                          _0: normalization,
                          [Symbol.for("name")]: "SolveConstraintsGlobal"
                        });
            }
        case /* ShowGoals */1 :
            return sendAgdaRequest({
                        TAG: 2,
                        _0: command._0,
                        [Symbol.for("name")]: "ShowGoals"
                      });
        case /* SearchAbout */2 :
            var normalization$1 = command._0;
            return $$Promise.map(State__View$AgdaModeVscode.Panel.prompt(state, header, {
                            body: undefined,
                            placeholder: "name:",
                            value: undefined
                          }, (function(normalization$1){
                          return function (expr) {
                            return sendAgdaRequest({
                                        TAG: 3,
                                        _0: normalization$1,
                                        _1: expr,
                                        [Symbol.for("name")]: "SearchAbout"
                                      });
                          }
                          }(normalization$1))), (function (param) {
                          return {
                                  TAG: 0,
                                  _0: undefined,
                                  [Symbol.for("name")]: "Ok"
                                };
                        }));
        case /* ElaborateAndGive */3 :
            var normalization$2 = command._0;
            var match$7 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$7 === undefined) {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            }
            var expr$1 = match$7[1];
            var goal$3 = match$7[0];
            if (expr$1 === "") {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.prompt(state, header, {
                              body: undefined,
                              placeholder: "expression to elaborate and give:",
                              value: undefined
                            }, (function(normalization$2,goal$3){
                            return function (expr) {
                              if (expr === "") {
                                return sendAgdaRequest({
                                            TAG: 6,
                                            _0: normalization$2,
                                            _1: expr,
                                            _2: goal$3,
                                            [Symbol.for("name")]: "ElaborateAndGive"
                                          });
                              } else {
                                return $$Promise.flatMap(State__Goal$AgdaModeVscode.modify(state, goal$3, (function (param) {
                                                  return expr;
                                                })), (function (param) {
                                              return sendAgdaRequest({
                                                          TAG: 6,
                                                          _0: normalization$2,
                                                          _1: expr,
                                                          _2: goal$3,
                                                          [Symbol.for("name")]: "ElaborateAndGive"
                                                        });
                                            }));
                              }
                            }
                            }(normalization$2,goal$3))), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            } else {
              return sendAgdaRequest({
                          TAG: 6,
                          _0: normalization$2,
                          _1: expr$1,
                          _2: goal$3,
                          [Symbol.for("name")]: "ElaborateAndGive"
                        });
            }
        case /* HelperFunctionType */4 :
            var normalization$3 = command._0;
            var match$8 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$8 === undefined) {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            }
            var expr$2 = match$8[1];
            var goal$4 = match$8[0];
            if (expr$2 === "") {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.prompt(state, header, {
                              body: undefined,
                              placeholder: "expression:",
                              value: undefined
                            }, (function(normalization$3,goal$4){
                            return function (expr) {
                              return sendAgdaRequest({
                                          TAG: 9,
                                          _0: normalization$3,
                                          _1: expr,
                                          _2: goal$4,
                                          [Symbol.for("name")]: "HelperFunctionType"
                                        });
                            }
                            }(normalization$3,goal$4))), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            } else {
              return sendAgdaRequest({
                          TAG: 9,
                          _0: normalization$3,
                          _1: expr$2,
                          _2: goal$4,
                          [Symbol.for("name")]: "HelperFunctionType"
                        });
            }
        case /* InferType */5 :
            var normalization$4 = command._0;
            var placeholder$1 = "expression to infer:";
            var match$9 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$9 === undefined) {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.prompt(state, header, {
                              body: undefined,
                              placeholder: placeholder$1,
                              value: undefined
                            }, (function(normalization$4){
                            return function (expr) {
                              return sendAgdaRequest({
                                          TAG: 11,
                                          _0: normalization$4,
                                          _1: expr,
                                          [Symbol.for("name")]: "InferTypeGlobal"
                                        });
                            }
                            }(normalization$4))), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            }
            var expr$3 = match$9[1];
            var goal$5 = match$9[0];
            if (expr$3 === "") {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.prompt(state, header, {
                              body: undefined,
                              placeholder: placeholder$1,
                              value: undefined
                            }, (function(normalization$4,goal$5){
                            return function (expr) {
                              return sendAgdaRequest({
                                          TAG: 10,
                                          _0: normalization$4,
                                          _1: expr,
                                          _2: goal$5,
                                          [Symbol.for("name")]: "InferType"
                                        });
                            }
                            }(normalization$4,goal$5))), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            } else {
              return sendAgdaRequest({
                          TAG: 10,
                          _0: normalization$4,
                          _1: expr$3,
                          _2: goal$5,
                          [Symbol.for("name")]: "InferType"
                        });
            }
        case /* Context */6 :
            var match$10 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$10 !== undefined) {
              return sendAgdaRequest({
                          TAG: 12,
                          _0: command._0,
                          _1: match$10[0],
                          [Symbol.for("name")]: "Context"
                        });
            } else {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            }
        case /* GoalType */7 :
            var match$11 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$11 !== undefined) {
              return sendAgdaRequest({
                          TAG: 13,
                          _0: command._0,
                          _1: match$11[0],
                          [Symbol.for("name")]: "GoalType"
                        });
            } else {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            }
        case /* GoalTypeAndContext */8 :
            var match$12 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$12 !== undefined) {
              return sendAgdaRequest({
                          TAG: 14,
                          _0: command._0,
                          _1: match$12[0],
                          [Symbol.for("name")]: "GoalTypeAndContext"
                        });
            } else {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            }
        case /* EventFromView */9 :
            var $$event = command._0;
            if (typeof $$event === "number") {
              if ($$event === /* Initialized */0) {
                return $$Promise.resolved({
                            TAG: 0,
                            _0: undefined,
                            [Symbol.for("name")]: "Ok"
                          });
              } else {
                return State$AgdaModeVscode.destroy(state, true);
              }
            }
            switch ($$event.TAG | 0) {
              case /* InputMethod */0 :
                  var $$char = $$event._0;
                  if ($$char.TAG !== /* InsertChar */0) {
                    return $$Promise.map(State__InputMethod$AgdaModeVscode.chooseSymbol(state, $$char._0), (function (param) {
                                  return {
                                          TAG: 0,
                                          _0: undefined,
                                          [Symbol.for("name")]: "Ok"
                                        };
                                }));
                  }
                  _command = {
                    TAG: 14,
                    _0: {
                      _0: $$char._0,
                      [Symbol.for("name")]: "InsertChar"
                    },
                    [Symbol.for("name")]: "InputMethod"
                  };
                  continue ;
              case /* PromptIMUpdate */1 :
                  var interval = $$event._0;
                  if (typeof interval !== "number") {
                    if (interval.TAG === /* MouseSelect */0) {
                      return $$Promise.map(State__InputMethod$AgdaModeVscode.select(state, [interval._0]), (function (param) {
                                    return {
                                            TAG: 0,
                                            _0: undefined,
                                            [Symbol.for("name")]: "Ok"
                                          };
                                  }));
                    } else {
                      return $$Promise.map(State__InputMethod$AgdaModeVscode.keyUpdatePromptIM(state, interval._0), (function (param) {
                                    return {
                                            TAG: 0,
                                            _0: undefined,
                                            [Symbol.for("name")]: "Ok"
                                          };
                                  }));
                    }
                  }
                  switch (interval) {
                    case /* BrowseUp */0 :
                        _command = {
                          TAG: 14,
                          _0: /* BrowseUp */1,
                          [Symbol.for("name")]: "InputMethod"
                        };
                        continue ;
                    case /* BrowseDown */1 :
                        _command = {
                          TAG: 14,
                          _0: /* BrowseDown */3,
                          [Symbol.for("name")]: "InputMethod"
                        };
                        continue ;
                    case /* BrowseLeft */2 :
                        _command = {
                          TAG: 14,
                          _0: /* BrowseLeft */4,
                          [Symbol.for("name")]: "InputMethod"
                        };
                        continue ;
                    case /* BrowseRight */3 :
                        _command = {
                          TAG: 14,
                          _0: /* BrowseRight */2,
                          [Symbol.for("name")]: "InputMethod"
                        };
                        continue ;
                    case /* Escape */4 :
                        if (IM$AgdaModeVscode.isActivated(state.editorIM) || IM$AgdaModeVscode.isActivated(state.promptIM)) {
                          return $$Promise.map(State__InputMethod$AgdaModeVscode.deactivate(state), (function (param) {
                                        return {
                                                TAG: 0,
                                                _0: undefined,
                                                [Symbol.for("name")]: "Ok"
                                              };
                                      }));
                        } else {
                          return $$Promise.map(State__View$AgdaModeVscode.Panel.interruptPrompt(state), (function (param) {
                                        return {
                                                TAG: 0,
                                                _0: undefined,
                                                [Symbol.for("name")]: "Ok"
                                              };
                                      }));
                        }
                    
                  }
              case /* JumpToTarget */2 :
                  var link = $$event._0;
                  Editor$AgdaModeVscode.focus(state.document);
                  var path = Parser$AgdaModeVscode.filepath(state.document.fileName);
                  if (link.TAG === /* SrcLoc */0) {
                    var match$13 = link._0;
                    if (!match$13) {
                      return $$Promise.resolved({
                                  TAG: 0,
                                  _0: undefined,
                                  [Symbol.for("name")]: "Ok"
                                });
                    }
                    var fileName = match$13._0;
                    if (fileName === undefined) {
                      return $$Promise.resolved({
                                  TAG: 0,
                                  _0: undefined,
                                  [Symbol.for("name")]: "Ok"
                                });
                    }
                    var fileName$1 = Parser$AgdaModeVscode.filepath(fileName);
                    var removeRoot = function (path) {
                      var obj = Path.parse(path);
                      var rootLength = obj.root.length;
                      var newDir = Js_string.sliceToEnd(rootLength, obj.dir);
                      return Path.format({
                                  root: "",
                                  dir: newDir,
                                  ext: obj.ext,
                                  name: obj.name,
                                  base: obj.base
                                });
                    };
                    var ranges = Belt_Array.map(match$13._1, Editor$AgdaModeVscode.$$Range.fromAgdaInterval);
                    var adjustEditor = (function(ranges){
                    return function adjustEditor(editor) {
                      Editor$AgdaModeVscode.$$Selection.setMany(editor, ranges);
                      Belt_Option.forEach(Belt_Array.get(ranges, 0), (function (range) {
                              VSCode.TextEditor.revealRange(editor, range, undefined);
                            }));
                    }
                    }(ranges));
                    if (removeRoot(path) === removeRoot(fileName$1)) {
                      adjustEditor(state.editor);
                      return $$Promise.resolved({
                                  TAG: 0,
                                  _0: undefined,
                                  [Symbol.for("name")]: "Ok"
                                });
                    }
                    var options = VSCode.TextDocumentShowOptions.make(undefined, true, undefined, undefined, undefined);
                    return $$Promise.map($$Promise.map(Vscode.workspace.openTextDocument(fileName$1), (function(options){
                                  return function ($$document) {
                                    return $$Promise.map(Vscode.window.showTextDocument($$document, options), adjustEditor);
                                  }
                                  }(options))), (function (param) {
                                  return {
                                          TAG: 0,
                                          _0: undefined,
                                          [Symbol.for("name")]: "Ok"
                                        };
                                }));
                  }
                  var index = link._0;
                  var goal$6 = Js_array.find((function(index){
                      return function (goal) {
                        return goal.index === index;
                      }
                      }(index)), state.goals);
                  if (goal$6 !== undefined) {
                    Goal$AgdaModeVscode.setCursor(goal$6, state.editor);
                  }
                  return $$Promise.resolved({
                              TAG: 0,
                              _0: undefined,
                              [Symbol.for("name")]: "Ok"
                            });
              
            }
        case /* GoalTypeContextAndInferredType */10 :
            var normalization$5 = command._0;
            var match$14 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$14 === undefined) {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            }
            var expr$4 = match$14[1];
            var goal$7 = match$14[0];
            if (expr$4 === "") {
              return sendAgdaRequest({
                          TAG: 14,
                          _0: normalization$5,
                          _1: goal$7,
                          [Symbol.for("name")]: "GoalTypeAndContext"
                        });
            } else {
              return sendAgdaRequest({
                          TAG: 15,
                          _0: normalization$5,
                          _1: expr$4,
                          _2: goal$7,
                          [Symbol.for("name")]: "GoalTypeContextAndInferredType"
                        });
            }
        case /* GoalTypeContextAndCheckedType */11 :
            var normalization$6 = command._0;
            var match$15 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$15 === undefined) {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            }
            var expr$5 = match$15[1];
            var goal$8 = match$15[0];
            if (expr$5 === "") {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.prompt(state, header, {
                              body: undefined,
                              placeholder: "expression to type:",
                              value: undefined
                            }, (function(normalization$6,goal$8){
                            return function (expr) {
                              return sendAgdaRequest({
                                          TAG: 16,
                                          _0: normalization$6,
                                          _1: expr,
                                          _2: goal$8,
                                          [Symbol.for("name")]: "GoalTypeContextAndCheckedType"
                                        });
                            }
                            }(normalization$6,goal$8))), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            } else {
              return sendAgdaRequest({
                          TAG: 16,
                          _0: normalization$6,
                          _1: expr$5,
                          _2: goal$8,
                          [Symbol.for("name")]: "GoalTypeContextAndCheckedType"
                        });
            }
        case /* ModuleContents */12 :
            var normalization$7 = command._0;
            var placeholder$2 = "module name:";
            var match$16 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$16 === undefined) {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.prompt(state, header, {
                              body: undefined,
                              placeholder: placeholder$2,
                              value: undefined
                            }, (function(normalization$7){
                            return function (expr) {
                              return sendAgdaRequest({
                                          TAG: 18,
                                          _0: normalization$7,
                                          _1: expr,
                                          [Symbol.for("name")]: "ModuleContentsGlobal"
                                        });
                            }
                            }(normalization$7))), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            }
            var expr$6 = match$16[1];
            var goal$9 = match$16[0];
            if (expr$6 === "") {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.prompt(state, header, {
                              body: undefined,
                              placeholder: placeholder$2,
                              value: undefined
                            }, (function(normalization$7,goal$9){
                            return function (expr) {
                              return sendAgdaRequest({
                                          TAG: 17,
                                          _0: normalization$7,
                                          _1: expr,
                                          _2: goal$9,
                                          [Symbol.for("name")]: "ModuleContents"
                                        });
                            }
                            }(normalization$7,goal$9))), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            } else {
              return sendAgdaRequest({
                          TAG: 17,
                          _0: normalization$7,
                          _1: expr$6,
                          _2: goal$9,
                          [Symbol.for("name")]: "ModuleContents"
                        });
            }
        case /* ComputeNormalForm */13 :
            var computeMode = command._0;
            var placeholder$3 = "expression to normalize:";
            var match$17 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$17 === undefined) {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.prompt(state, header, {
                              body: undefined,
                              placeholder: placeholder$3,
                              value: undefined
                            }, (function(computeMode){
                            return function (expr) {
                              return sendAgdaRequest({
                                          TAG: 20,
                                          _0: computeMode,
                                          _1: expr,
                                          [Symbol.for("name")]: "ComputeNormalFormGlobal"
                                        });
                            }
                            }(computeMode))), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            }
            var expr$7 = match$17[1];
            var goal$10 = match$17[0];
            if (expr$7 === "") {
              return $$Promise.map(State__View$AgdaModeVscode.Panel.prompt(state, header, {
                              body: undefined,
                              placeholder: placeholder$3,
                              value: undefined
                            }, (function(computeMode,goal$10){
                            return function (expr) {
                              return sendAgdaRequest({
                                          TAG: 19,
                                          _0: computeMode,
                                          _1: expr,
                                          _2: goal$10,
                                          [Symbol.for("name")]: "ComputeNormalForm"
                                        });
                            }
                            }(computeMode,goal$10))), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            } else {
              return sendAgdaRequest({
                          TAG: 19,
                          _0: computeMode,
                          _1: expr$7,
                          _2: goal$10,
                          [Symbol.for("name")]: "ComputeNormalForm"
                        });
            }
        case /* InputMethod */14 :
            var $$char$1 = command._0;
            if (typeof $$char$1 !== "number") {
              return $$Promise.map(State__InputMethod$AgdaModeVscode.insertChar(state, $$char$1._0), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: undefined,
                                    [Symbol.for("name")]: "Ok"
                                  };
                          }));
            }
            switch ($$char$1) {
              case /* Activate */0 :
                  if (Config$AgdaModeVscode.InputMethod.getEnable(undefined)) {
                    return $$Promise.map(State__InputMethod$AgdaModeVscode.activateEditorIM(state), (function (param) {
                                  return {
                                          TAG: 0,
                                          _0: undefined,
                                          [Symbol.for("name")]: "Ok"
                                        };
                                }));
                  }
                  var activationKey = Config$AgdaModeVscode.InputMethod.getActivationKey(undefined);
                  Belt_Array.forEach(Editor$AgdaModeVscode.Cursor.getMany(state.editor), (function(activationKey){
                      return function (point) {
                        Editor$AgdaModeVscode.$$Text.insert(state.document, point, activationKey);
                      }
                      }(activationKey)));
                  return $$Promise.resolved({
                              TAG: 0,
                              _0: undefined,
                              [Symbol.for("name")]: "Ok"
                            });
              case /* BrowseUp */1 :
                  return $$Promise.map(State__InputMethod$AgdaModeVscode.moveUp(state), (function (param) {
                                return {
                                        TAG: 0,
                                        _0: undefined,
                                        [Symbol.for("name")]: "Ok"
                                      };
                              }));
              case /* BrowseRight */2 :
                  return $$Promise.map(State__InputMethod$AgdaModeVscode.moveRight(state), (function (param) {
                                return {
                                        TAG: 0,
                                        _0: undefined,
                                        [Symbol.for("name")]: "Ok"
                                      };
                              }));
              case /* BrowseDown */3 :
                  return $$Promise.map(State__InputMethod$AgdaModeVscode.moveDown(state), (function (param) {
                                return {
                                        TAG: 0,
                                        _0: undefined,
                                        [Symbol.for("name")]: "Ok"
                                      };
                              }));
              case /* BrowseLeft */4 :
                  return $$Promise.map(State__InputMethod$AgdaModeVscode.moveLeft(state), (function (param) {
                                return {
                                        TAG: 0,
                                        _0: undefined,
                                        [Symbol.for("name")]: "Ok"
                                      };
                              }));
              
            }
        
      }
    }
  };
}

exports.dispatchCommand = dispatchCommand;
/* path Not a pure module */
